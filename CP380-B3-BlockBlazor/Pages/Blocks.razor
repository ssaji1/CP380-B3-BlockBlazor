@page "/blocks"
<!-- TODO: Add using and inject statements -->
@using CP380_B1_BlockList.Models
@using CP380_B3_BlockBlazor.Data
@inject BlockService BlockService
@inject MiningService miningService
<h3>Blocks</h3>

@if (blocklist == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card-columns">

        <!-- TODO: Add cards for each block in the block list

                   Each card should show:
                        - the position in the chain (starting at 0)
                        - the hash
                        - the nonce
                        - the previous hash
          -->
        @{
            var i = 1;
        }
        @foreach (var values in blocklist)
        {
            <div class="card">
                <div class="card-body">
                    Position: @i
                    <p class="card-text">Hash: @values.Hash</p>
                    <p class="card-text">Nonce: @values.Nonce</p>
                    <p class="card-text">PreviousHash: @values.PreviousHash</p>
                    <a href="..." class="btn btn-primary">Click Here</a>
                </div>
            </div>
            ++i;
        }
    </div>
}

@code {
    IEnumerable<Block> blocklist;

    Block block;

    protected override async Task OnInitializedAsync()
    {
        // TODO: fetch blocks from the BlockService

        blocklist = await BlockService.ListBlocks();

        block = await miningService.MineBlock();
    }
    private async Task HandleValidSubmit()
    {

        var res = await BlockService.SubmitNewBlockAsync(block);
        blocklist = await BlockService.ListBlocks();

    }
   
}
